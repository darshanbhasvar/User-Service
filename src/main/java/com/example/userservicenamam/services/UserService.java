package com.example.userservicenamam.services;


import com.example.userservicenamam.models.Token;
import com.example.userservicenamam.models.User;
import com.example.userservicenamam.repository.TokenRepository;
import com.example.userservicenamam.repository.UserRepository;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Optional;

@Service
public class UserService {
    private UserRepository userRepository;
    private BCryptPasswordEncoder passwordEncoder;
    private final TokenRepository tokenRepository;

    public UserService(UserRepository userRepository,BCryptPasswordEncoder passwordEncoder,
                       TokenRepository tokenRepository){
        this.userRepository= userRepository;
        this.passwordEncoder = passwordEncoder;
        this.tokenRepository = tokenRepository;
    }
    public User signup(String name,
                       String email,
                       String password){
        User u = new User();
        u.setName(name);
        u.setEmail(email);
        u.setHashedPassword(passwordEncoder.encode(password));
        User user = userRepository.save(u);
        return user;
    }

    public Token login(String email , String password){
        Optional<User> optionalUser = userRepository.findByEmail(email);

        if(optionalUser.isEmpty()){
            throw new RuntimeException("user not found");
        }
        User u = optionalUser.get();
        if(!passwordEncoder.matches(password,u.getHashedPassword())){//if this password was generated by that password
            throw new RuntimeException("password not match");
        }
        LocalDate today = LocalDate.now();
        LocalDate thirtyDaysLater = today.plus(30, ChronoUnit.DAYS);

        // Convert LocalDate to Date
        Date expiryDate = Date.from(thirtyDaysLater.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Token token = new Token();
        token.setUser(u);
        token.setExpiryAt(expiryDate);
        token.setValue(RandomStringUtils.randomAlphanumeric(128));
        Token savedToken=tokenRepository.save(token);
        return savedToken;
    }
    public void logout(String token){
        Optional<Token> token1 = tokenRepository.findByValueAndDeleted(token,false);
        if(token1.isEmpty()){
            throw new RuntimeException("token not exist");
        }
        Token tkn = token1.get();
        tkn.setDeleted(true);
        tokenRepository.save(tkn);
        return;
    }


    public User validateToken(String token) {
        Optional<Token>tkn = tokenRepository.findByValueAndDeletedAndExpiryAtGreaterThan(token,false,new Date());

        if(tkn.isEmpty()){
            return null;
        }
        return tkn.get().getUser();
    }
}
